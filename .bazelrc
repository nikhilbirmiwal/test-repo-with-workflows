# hello world
# Allow us to have configs differ on macos and linux
#
# Implies --config=linux on Linux hosts and --config=macos on MacOS hosts (also
# implies the same for windows, freebsd, and openbsd, but none of those are
# relevant to us). See https://bazel.build/reference/command-line-reference for
# more details.
common --enable_platform_specific_config

# We don't use the auto-configured c++ toolchain.
build --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# Set up toolchains
build --extra_toolchains=//toolchain/cc:cc-toolchain-linux-x86_64-linux-x86_64
build --extra_toolchains=//toolchain/cc:cc-toolchain-linux-x86_64-macos-x86_64
build --extra_toolchains=//toolchain/cc:cc-toolchain-linux-x86_64-macos-arm64
build --extra_toolchains=//toolchain/cc:cc-toolchain-macos-arm64-macos-arm64
build --extra_toolchains=//toolchain/cc:cc-toolchain-macos-arm64-macos-x86_64
build --extra_toolchains=//toolchain/cc:cc-toolchain-macos-arm64-linux-x86_64
build --extra_toolchains=//toolchain/cc:cc-toolchain-macos-x86_64-macos-x86_64
build --extra_toolchains=//toolchain/cc:cc-toolchain-macos-x86_64-macos-arm64
build --extra_toolchains=//toolchain/cc:cc-toolchain-macos-x86_64-linux-x86_64
build --extra_toolchains=//toolchain/cc:cc-toolchain-linux-x86_64-linux-x86_64-msan
build --extra_toolchains=//toolchain/cc:cc-toolchain-linux-x86_64-windows-x86_64
build --host_platform=//toolchain/cc:host_platform_libcxx

# Sanitize the environment for hermeticity and caching.
build --incompatible_strict_action_env

# Enabled new-style cc toolchain resolution, otherwise we need to specify crosstool_top.
build --incompatible_enable_cc_toolchain_resolution

# Our sanitizer features need this.
build --incompatible_dont_enable_host_nonhost_crosstool_features=false

# TRUNK-5698
build --incompatible_use_platforms_repo_for_constraints=false

# Don't use system java
build --incompatible_use_toolchain_resolution_for_java_rules
build --java_runtime_version=remotejdk_17

# Enable experimental feature which avoids errors seen running vscode tests which have spaces in the runfiles list
# https://github.com/bazelbuild/bazel/issues/4327
build --experimental_inprocess_symlink_creation

# Tags such as no-remote and no-cache have no effect without this.
# See https://github.com/bazelbuild/bazel/issues/8830.
build --experimental_allow_tags_propagation

# Fallback to local if cache is not working or timing out
build --remote_local_fallback
build --remote_timeout=30s

# This is needed for 2 reasons:
# 1) When using RBE, we need to tell it about our exec_propertioes.
# 2) When not using RBE we still want to use this so that our cache keys match with remote or
#    local execution. Bazel mixes the exec_properties from this platform into the cache keys.
build:linux --extra_execution_platforms=@local_config_platform//:host
# From `bazel run //toolchain/cc/engflow:worker_push`
build:linux --remote_default_exec_properties=container-image=docker://public.ecr.aws/f0j2j9t3/engflow_worker@sha256:0a3dad150a2e9dac2fbbda7a021d3eb81e4a2b348724454fa90c2f8e3c496c6b
# Allows networking inside the docker container.
build:linux --remote_default_exec_properties=dockerNetwork=standard
# Allows running docker inside docker.
build:linux --remote_default_exec_properties=dockerSiblingContainers=True

# Use remote and local exection.
# Maybe pick and choose which actions are exected remotely?, ie:
#  build:remote --spawn_strategy=sandboxed
#  build:remote --strategy=CppCompile=dynamic
# Temporarily removed due to CI performance issues.
# build:remote --remote_executor=grpc://bazelcache.trunk.io:8080/
# build:remote --internal_spawn_scheduler
# build:remote --spawn_strategy=dynamic
# build:remote --jobs=32
# build:remote --local_cpu_resources=HOST_CPUS*0.5  # Default 1.0
# build:remote --local_ram_resources=HOST_RAM*0.5   # Default 0.67

# BuildBuddy integration
build --remote_cache=grpc://a49618d0121254a03be3d3cb178094ed-1817837657.us-east-2.elb.amazonaws.com:1985
build --bes_results_url=http://a49618d0121254a03be3d3cb178094ed-1817837657.us-east-2.elb.amazonaws.com/invocation/
build --bes_backend=grpc://a49618d0121254a03be3d3cb178094ed-1817837657.us-east-2.elb.amazonaws.com:1985
build --bes_upload_mode=fully_async
# If async uploads error locally (report shows "Disconnected"), you can wait for the full upload.
# build --bes_upload_mode=wait_for_upload_complete

# Better output
build --color=yes
build --test_output=errors
build --test_env=GTEST_COLOR=1
build --test_env=PYTEST_ADDOPTS=--color=yes

# Define absl=1 to tell googletest to use absl for backtrace.
build --define absl=1

# Dev release version
build --define="TRUNK_RELEASE=0.0.0-rc"

# We disable telemetry in tests; this is the most straightforward way to do so
test --define="TRUNK_RELEASE=0.0.0"

# re-configure telemetry correctly during test/coverage steps
test --test_env=TRUNK_MIXPANEL=off
test --test_env=TRUNK_SENTRY=dev
test --test_env=TRUNK_API_ADDRESS=api.trunk-staging.io:8443

# Tell spdlog to include all spdlog statements by default
# NOTE(sam): if we ever get benchmarks that show that removing debug/trace
# statements improves performance, we can set this to INFO for release builds
build --define="SPDLOG_COMPILE_LEVEL=SPDLOG_LEVEL_TRACE"

# "Null" parameters for docker_push that must be overridden with AWS account and repo information
build --define="AWS_ECR_URL=null"
build --define="IMAGE_TAG=null"

# Exclude tests that should never be run (e.g. if foo:container_test exists, then you generally
# never want to run foo:test using a glob)
test --test_tag_filters=-always_skip

# Keep builds deterministic, write all 0 timestamps for debug maps
build:macos --action_env=ZERO_AR_DATE=1

# Address Sanitizer
build:asan --features=asan
build:asan --cc_output_directory_tag=asan
build:asan --//toolchain/cc:asan=True
test:asan --test_tag_filters=-always_skip,-no_asan
# ~2x Overhead for asan
test:asan --test_timeout=120,600,1800,7200

# Undefined Behavior Sanitizer
build:ubsan --features=ubsan
build:ubsan --cc_output_directory_tag=ubsan
build:ubsan --//toolchain/cc:ubsan=True
test:ubsan --test_env=UBSAN_OPTIONS=print_stacktrace=1
test:ubsan --test_tag_filters=-always_skip,-no_ubsan

# Address Sanitizer + Undefined Behavior Sanitizer
build:asan_ubsan --features=asan
build:asan_ubsan --features=ubsan
build:asan_ubsan --//toolchain/cc:asan=True
build:asan_ubsan --//toolchain/cc:ubsan=True
test:asan_ubsan --test_env=ASAN_OPTIONS=print_stacktrace=1
build:asan_ubsan --cc_output_directory_tag=asan_ubsan
test:asan_ubsan --test_tag_filters=-always_skip,-no_asan,-no_ubsan
# ~2x Overhead for asan
test:asan_ubsan --test_timeout=220,1200,3600,14400

# Thread Sanitizer
build:tsan --features=tsan
build:tsan --//toolchain/cc:tsan=True
build:tsan --cc_output_directory_tag=tsan
# Supress data race report from absl, see https://github.com/google/sanitizers/issues/953
test:tsan --test_env=TSAN_OPTIONS=report_atomic_races=0
test:tsan --test_tag_filters=-always_skip,-no_tsan
# ThreadSanitizer overhead is 5-10x
test:tsan --test_timeout=1200,6000,18000,72000

# Memory Sanitizer
build:msan --features=msan
build:msan --//toolchain/cc:msan=True
build:msan --cc_output_directory_tag=msan
build:msan --platforms=//toolchain/cc:host_platform_libcxx_msan
test:msan --test_env=MSAN_OPTIONS=print_stacktrace=1
test:msan --test_tag_filters=-always_skip,-no_msan
# ~2x Overhead for msan
test:msan --test_timeout=120,600,1800,7200

# CI mode
build:ci_no_asan --copt=-Werror
test:ci_no_asan --keep_going
test:ci_no_asan --flaky_test_attempts=2
test:ci_no_asan --test_tag_filters=-always_skip,-docker
build:ci --config=ci_no_asan
build:ci --config=asan_ubsan
build:ci --local_cpu_resources=HOST_CPUS
build:ci --noshow_loading_progress
# limit updates during compile time to once every 30s
build:ci --show_progress_rate_limit=30
test:ci --config=ci_no_asan

# AWS credentials
test:aws --test_env=AWS_ACCESS_KEY_ID
test:aws --test_env=AWS_DEFAULT_REGION
test:aws --test_env=AWS_REGION
test:aws --test_env=AWS_SECRET_ACCESS_KEY
test:aws --test_env=AWS_SESSION_TOKEN
test:aws --test_env=STRIPE_SECRET_KEY_NAME
test:aws --test_env=STRIPE_SECRET_KEY

# Integration Tests
test:integration --test_tag_filters=docker
test:integration --build_tests_only

# Release
build:release --compilation_mode=opt
build:release --copt=-Werror
build:release --//toolchain/cc:default_linkdynamic=False

build:macos_arm64 --platforms=//toolchain/cc:macos_arm64
build:macos_arm64 --cc_output_directory_tag=macos_arm64
build:macos_x86_64 --platforms=//toolchain/cc:macos_x86_64
build:macos_x86_64 --cc_output_directory_tag=macos_x86_64
build:linux_x86_64 --platforms=//toolchain/cc:linux_x86_64
build:linux_x86_64 --cc_output_directory_tag=linux_x86_64
build:windows_x86_64 --platforms=//toolchain/cc:windows_x86_64
build:windows_x86_64 --cc_output_directory_tag=windows_x86_64
build:windows_x86_64 --//toolchain/cc:default_linkdynamic=False

# Flag aliases
build --flag_alias=app_build_mode=//trunk/web:app_build_mode
build --flag_alias=services_build_mode=//trunk/services:services_build_mode

# We use the llvm toolchain, not gcc.
coverage --experimental_use_llvm_covmap
coverage --experimental_generate_llvm_lcov

# Disallow the network by default in tests.
build --sandbox_default_allow_network=false

# Speed up linux sandboxes by using tmpfs
build:linux --sandbox_base=/dev/shm

# Make a "user.bazelrc" file in the repo root to store personal settings, it's gitignored
try-import %workspace%/user.bazelrc

# Allow tags to be propagated, mostly for nodejs targets
common --incompatible_allow_tags_propagation
